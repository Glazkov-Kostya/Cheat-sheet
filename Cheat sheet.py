# Числа

# Целые числа, числа с плавающей запятой и комплексные числа относятся к группе чисел. В Python они представлены классами int, float и complex.
# Мы можем использовать функцию type(), чтобы узнать класс переменной или значения, и функцию isinstance() для проверки принадлежности объекта определённому классу:
# Целые числа могут быть любой длины, они ограничиваются лишь доступной памятью.
# Числа с плавающей запятой имеют ограниченную точность. Визуально разницу между целым числом и числом с плавающей запятой можно заметить в консоли по наличию точки: 1 — целое число, 1.0 — с плавающей запятой.
# Комплексные числа записываются в форме x+yj, где x — действительная часть числа, а y — мнимая
x = 1234567890123456789
print(x)
y = 0.1234567890123456789
print(y)
c = 1+2j
print(c)
# Обратите внимание, что значение переменной b было усечено.

# Списки

# Список представляет собой упорядоченную последовательность элементов.
# Элементы списка не обязательно должны быть одного типа.
# Объявить список довольно просто. Внутрь квадратных скобок помещаются элементы списка, разделённые запятой:
List_ = [1, 2.2, 'python']
print(List_)
# Мы можем использовать оператор [] для извлечения элемента (такая операция называется “доступ по индексу”) или диапазона элементов (такая операция называется “извлечение среза”) из списка. В Python индексация начинается с нуля:
List1_ = [5,10,15,20,25,30,35,40]
print(List1_)
print("List1_[2] =", List1_[2])
List1_[2] = 15
print("List1_[0:3] =", List1_[0:3])
List1_[0:3] = [5, 10, 15]
print("List1_[5:] =", List1_[5:])
List1_[5:] = [30, 35, 40]
print(List1_)
# Списки являются изменяемым типом, т.е. значения его элементов можно изменить:
List2_ = [1,2,3]
List2_[2] = 4
print(List2_)

# Кортежи

# Так же как и список, кортеж (tuple) является упорядоченной последовательностью элементов. Вся разница заключается в том, что кортежи неизменяемы.
# Кортежи используются для защиты данных от перезаписи и обычно работают быстрее, чем списки, т.к. их нельзя изменять.
# Для создания кортежа нужно поместить внутрь круглых скобок элементы, разделённые запятой:

# Строки

# Строка представляет собой последовательность символов. Мы можем использовать одинарные или двойные кавычки для создания строки. Многострочные строки можно обозначить тройными кавычками, ''' или """
# Как и в случае со списками и кортежами, мы можем использовать оператор [] и со строками. Стоит отметить, что строки в Python относятся к категории неизменяемых последовательностей, то есть все функции и методы могут лишь создавать новую строку.

# Множества

# Множество является неупорядоченной последовательностью с уникальными данными(объектами). Объявляется множество с помощью элементов, разделённых запятой, внутри фигурных скобок:
# Над множествами можно выполнять такие операции, как объединение и пересечение. т.к. элементы в множестве должны быть уникальны, они автоматически удаляют дубликаты.
# Поскольку множество является неупорядоченной последовательностью, оператор извлечения среза здесь не работает.

# Словари

# Словари — неупорядоченные наборы пар ключ-значение.
# Они используются, когда нужно сопоставить каждому из ключей значение и иметь возможность быстро получать доступ к значению, зная ключ. В других языках словари обычно называются map, hash или object. Словари оптимизированы для извлечения данных. Чтобы извлечь значение, нужно знать ключ.
# Словарь объявляется парами элементов в форме ключ:значение, заключенными в фигурные скобки
# Значение может быть любого типа, а вот ключ — только неизменяемого.
# Мы используем ключ, чтобы получить соответствующее ему значение. Но не наоборот:
d = {1:'value', 'key':2}
print("d[1] =", d[1])
print("d['key'] =", d['key'])

# Преобразование типов данных

# Мы можем преобразовывать значения из одного типа в другой с помощью таких функций, как int(), float(), str() и т.д.
f = float(5)
print(f)
# При преобразовании числа с плавающей запятой в целое будет утеряна часть после запятой:
i = int(10.6)
print(i)
# Для преобразования из/в строку должны использоваться совместимые значения:
f1 = float('2.5')
print(f1)
s1 = str(25)
print(s1)
# Можно даже преобразовывать одну последовательность в другую:
set_ = set([1,2,3])
print(set_)
tuple_ = tuple({5,6,7})
print(tuple_)
list_ = list('hello')
print(list_)
# Для преобразования списка из символов обратно в строку нельзя вызвать str(список), так как в результате мы получим строковое представление списка (наподобие того, что мы видим, когда выводим список на экран).
# Для преобразования в словарь каждый элемент последовательности должен быть парой:
d = dict([[1,2],[3,4]])
print(d)
d1 = dict([(3,26),(4,44)])
print(d1)